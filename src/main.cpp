//#include <Arduino.h>
//
//#include "DHT.h"
//#include <MQUnifiedsensor.h>
//
////Definitions
//#define placa "Arduino UNO"
//#define Voltage_Resolution 5
//#define ADC_Bit_Resolution 10
//
//#define pin A0 //Analog input 0 of your arduino
//#define type "MQ-5" //MQ5
//#define RatioMQ5CleanAir 6.5  //RS / R0 = 6.5 ppm
//
//#define pin A1 //Analog input 1 of your arduino
//#define type "MQ-8" //MQ8
//#define RatioMQ8CleanAir 70   //RS / R0 = 70 ppm 
//
//#define pin A2 //Analog input 2 of your arduino
//#define type "MQ-7" //MQ7
//#define RatioMQ7CleanAir 27.5 //RS / R0 = 27.5 ppm
//unsigned long oldTime = 0;
//
//#define pin A3 //Analog input 3 of your arduino
//#define type "MQ-135" //MQ135
//#define RatioMQ135CleanAir 3.6//RS / R0 = 3.6 ppm 
//
//#define DHTPIN 2
//#define DHTTYPE DHT22
//DHT dht(DHTPIN, DHTTYPE);
//
//MQUnifiedsensor MQ5(placa, Voltage_Resolution, ADC_Bit_Resolution, pin, type);
//MQUnifiedsensor MQ8(placa, Voltage_Resolution, ADC_Bit_Resolution, pin, type);
//MQUnifiedsensor MQ7(placa, Voltage_Resolution, ADC_Bit_Resolution, pin, type);
//MQUnifiedsensor MQ135(placa, Voltage_Resolution, ADC_Bit_Resolution, pin, type);
//
//void setup() 
//{
//
//  Serial.begin(9600);
//
//  MQ5.setRegressionMethod(1); //_PPM =  a*ratio^b
//  MQ8.setRegressionMethod(1); //_PPM =  a*ratio^b
//  MQ7.setRegressionMethod(1); //_PPM =  a*ratio^b
//  MQ135.setRegressionMethod(1); //_PPM =  a*ratio^b
//  
//  //MQ5
//  MQ5.setA(80.897); MQ5.setB(-2.431); // Configure the equation to to calculate H2 concentration
//  /*
//    Exponential regression:
//  Gas    | a      | b
//  H2     | 1163.8 | -3.874
//  LPG    | 80.897 | -2.431
//  CH4    | 177.65 | -2.56
//  CO     | 491204 | -5.826
//  Alcohol| 97124  | -4.918
//  */
//  MQ5.init();   
//  Serial.print("Calibrating please wait.");
//  float calcR0 = 0;
//  for(int i = 1; i<=10; i ++)
//  {
//    MQ5.update(); // Update data, the arduino will read the voltage from the analog pin
//    calcR0 += MQ5.calibrate(RatioMQ5CleanAir);
//    Serial.print(".");
//  }
//  MQ5.setR0(calcR0/10);
//  Serial.println("  done!.");
//  if(isinf(calcR0)) {Serial.println("Warning: Conection issue, R0 is infinite (Open circuit detected) please check your wiring and supply"); while(1);}
//  if(calcR0 == 0){Serial.println("Warning: Conection issue found, R0 is zero (Analog pin shorts to ground) please check your wiring and supply"); while(1);}
//
//  //MQ8
//  MQ8.setA(976.97); MQ8.setB(-0.688); // Configure the equation to to calculate H2 concentration
//  /*
//    Exponential regression:
//  GAS     | a      | b
//  H2      | 976.97  | -0.688
//  LPG     | 10000000 | -3.123
//  CH4     | 80000000000000 | -6.666
//  CO      | 2000000000000000000 | -8.074
//  Alcohol | 76101 | -1.86
//  */
//  MQ8.init();
//  Serial.print("Calibrating please wait.");
//  float calcR01 = 0;
//  for(int i = 1; i<=10; i ++)
//  {
//    MQ8.update(); // Update data, the arduino will read the voltage from the analog pin
//    calcR01 += MQ8.calibrate(RatioMQ8CleanAir);
//    Serial.print(".");
//  }
//  MQ8.setR0(calcR01/10);
//  Serial.println("  done!.");
//  if(isinf(calcR01)) {Serial.println("Warning: Conection issue, R0 is infinite (Open circuit detected) please check your wiring and supply"); while(1);}
//  if(calcR01 == 0){Serial.println("Warning: Conection issue found, R0 is zero (Analog pin shorts to ground) please check your wiring and supply"); while(1);}
//
//  //MQ7
//  MQ7.setA(99.042); MQ7.setB(-1.518); // Configure the equation to calculate CO concentration value
//  /*
//    Exponential regression:
//  GAS     | a      | b
//  H2      | 69.014  | -1.374
//  LPG     | 700000000 | -7.703
//  CH4     | 60000000000000 | -10.54
//  CO      | 99.042 | -1.518
//  Alcohol | 40000000000000000 | -12.35
//  */
//  MQ7.init(); 
//  Serial.print("Calibrating please wait.");
//  float calcR02 = 0;
//  for(int i = 1; i<=10; i ++)
//  {
//    MQ7.update(); // Update data, the arduino will read the voltage from the analog pin
//    calcR02 += MQ7.calibrate(RatioMQ7CleanAir);
//    Serial.print(".");
//  }
//  MQ7.setR0(calcR02/10);
//  Serial.println("  done!.");
//  if(isinf(calcR02)) {Serial.println("Warning: Conection issue, R0 is infinite (Open circuit detected) please check your wiring and supply"); while(1);}
//  if(calcR02 == 0){Serial.println("Warning: Conection issue found, R0 is zero (Analog pin shorts to ground) please check your wiring and supply"); while(1);}
//  
//  //MQ135
//  MQ135.init(); 
//  Serial.print("Calibrating please wait.");
//  float calcR03 = 0;
//  for(int i = 1; i<=10; i ++)
//  {
//    MQ135.update(); // Update data, the arduino will read the voltage from the analog pin
//    calcR03 += MQ135.calibrate(RatioMQ135CleanAir);
//    Serial.print(".");
//  }
//  MQ135.setR0(calcR03/10);
//  Serial.println("  done!.");
//  
//  if(isinf(calcR03)) {Serial.println("Warning: Conection issue, R0 is infinite (Open circuit detected) please check your wiring and supply"); while(1);}
//  if(calcR03 == 0){Serial.println("Warning: Conection issue found, R0 is zero (Analog pin shorts to ground) please check your wiring and supply"); while(1);}
//  /*
//  Exponential regression:
//  GAS      | a      | b
//  CO       | 605.18 | -3.937  
//  Alcohol  | 77.255 | -3.18 
//  CO2      | 110.47 | -2.862
//  Toluen  | 44.947 | -3.445
//  NH4      | 102.2  | -2.473
//  Aceton  | 34.668 | -3.369
//  */
//  Serial.println(F("DHT test!"));
//  dht.begin();
//
//}
//
//
//void loop() 
//{
//  float h = dht.readHumidity();
//  float t = dht.readTemperature();
//  float f = dht.readTemperature(true);
//  if (isnan(h) || isnan(t) || isnan(f)) {
//    Serial.println(F("Failed to read from DHT sensor!"));
//    return;
//  }
//
//  Serial.print(F("Humidity(%):"));
//  Serial.print(h);
//  //Serial.println(F("%"));
//  Serial.print(" ");
//
//  Serial.print(F("Temperature(°C):"));
//  Serial.print(t);
//  //Serial.println(F("°C"));
//  Serial.print(" ");
//
//  //Serial.println("Measurement in PPM: ");
//
//  //MQ5
//  MQ5.update(); // Update data, the arduino will read the voltage from the analog pin
//  Serial.print("MQ5_LPG:");
//  Serial.print(MQ5.readSensor()); // Sensor will read PPM concentration using the model, a and b values set previously or from the setup
//  Serial.print(" ");
//  //MQ8
//  MQ8.update(); // Update data, the arduino will read the voltage from the analog pin
//  Serial.print("MQ8_H2:");
//  Serial.print(MQ8.readSensor()); // Sensor will read PPM concentration using the model, a and b values set previously or from the setup
//  Serial.print(" ");
//  //MQ7
//  MQ7.update(); // Update data, the arduino will read the voltage from the analog pin
//  Serial.print("MQ7_CO:");
//  Serial.print(MQ7.readSensor());// Sensor will read PPM concentration using the model, a and b values set previously or from the setup
//  Serial.print(" ");
//  //MQ135
//  MQ135.update(); // Update data, the arduino will read the voltage from the analog pin
//
//  MQ135.setA(605.18); MQ135.setB(-3.937); // Configure the equation to calculate CO concentration value
//  float CO = MQ135.readSensor(); // Sensor will read PPM concentration using the model, a and b values set previously or from the setup
//
//  MQ135.setA(77.255); MQ135.setB(-3.18); //Configure the equation to calculate Alcohol concentration value
//  float Alcohol = MQ135.readSensor(); // SSensor will read PPM concentration using the model, a and b values set previously or from the setup
//
//  MQ135.setA(110.47); MQ135.setB(-2.862); // Configure the equation to calculate CO2 concentration value
//  float CO2 = MQ135.readSensor(); // Sensor will read PPM concentration using the model, a and b values set previously or from the setup
//
//  MQ135.setA(44.947); MQ135.setB(-3.445); // Configure the equation to calculate Toluen concentration value
//  float Toluen = MQ135.readSensor(); // Sensor will read PPM concentration using the model, a and b values set previously or from the setup
//  
//  MQ135.setA(102.2 ); MQ135.setB(-2.473); // Configure the equation to calculate NH4 concentration value
//  float NH4 = MQ135.readSensor(); // Sensor will read PPM concentration using the model, a and b values set previously or from the setup
//
//  MQ135.setA(34.668); MQ135.setB(-3.369); // Configure the equation to calculate Aceton concentration value
//  float Aceton = MQ135.readSensor(); // Sensor will read PPM concentration using the model, a and b values set previously or from the setup
//  
//  Serial.print("MQ135_CO:"); Serial.print(CO); Serial.print(" ");
//  Serial.print("MQ135_Alcohol:"); Serial.print(Alcohol); Serial.print(" ");
//  Serial.print("MQ135_CO2:"); Serial.print(CO2 + 422.38); Serial.print(" ");
//  Serial.print("MQ135_Toluen:"); Serial.print(Toluen); Serial.print(" ");
//  Serial.print("MQ135_NH4:"); Serial.print(NH4); Serial.print(" ");
//  Serial.print("MQ135_Aceton:"); Serial.println(Aceton);  
//  Serial.println();
//  delay(2000);
//
//}
//

//#include <Arduino.h>
//#include <SPI.h>
//#include <Wire.h>
//#include <Adafruit_GFX.h>
//#include <Adafruit_SH110X.h>
//
///* Uncomment the initialize the I2C address , uncomment only one, If you get a totally blank screen try the other*/
//#define i2c_Address 0x3c //initialize with the I2C addr 0x3C Typically eBay OLED's
////#define i2c_Address 0x3d //initialize with the I2C addr 0x3D Typically Adafruit OLED's
//
//#define SCREEN_WIDTH 128 // OLED display width, in pixels
//#define SCREEN_HEIGHT 64 // OLED display height, in pixels
//#define OLED_RESET -1   //   QT-PY / XIAO
//Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
//
//
//
//void setup()  {
//
//  Serial.begin(9600);
//
//  delay(250); // wait for the OLED to power up
//  display.begin(i2c_Address, true);
//  display.display();
//  delay(5000);
//  display.clearDisplay();
//}
//
//
//void loop() {
//
//  display.setTextSize(1);
//  display.setTextColor(SH110X_WHITE);
//  display.setCursor(0, 0);
//  display.print("Humam");
//  display.display();
//  delay(500);
//  display.clearDisplay();
//
//  display.setCursor(15, 16);
//  display.print("---THE BOT---");
//  display.display();
//  delay(500);
//  display.clearDisplay();
//
//  display.setCursor(90,32);
//  display.print("PUK U");
//  display.display();
//  delay(500);
//  display.clearDisplay();
//}
//


// simple project using Arduino UNO and 128x64 SSD1306 IIC OLED Display to display animated icon from www.icons8.com

// created by upir, 2023
// youtube channel: https://www.youtube.com/upir_upir

// YOUTUBE VIDEO: https://youtu.be/o3PhC_VJdXo
// WOKWI sketch: https://wokwi.com/projects/374294166215201793

// Links from the video:
// WOKWI animator: https://animator.wokwi.com/
// Animated icons: https://icons8.com/icons/set/popular--animated
// Infinity icon: https://icons8.com/icons/set/infinity--animated
// 128x64 SSD1306 OLED Display 1.54": https://s.click.aliexpress.com/e/_DCYdWXb 
// 128x64 SSD1306 OLED Display 0.96": https://s.click.aliexpress.com/e/_DCKdvnh
// 128x64 SSD1306 OLED Display 2.42": https://s.click.aliexpress.com/e/_DFdMoTh
// Arduino UNO: https://s.click.aliexpress.com/e/_AXDw1h
// Arduino breadboard prototyping shield: https://s.click.aliexpress.com/e/_ApbCwx
// Image2cpp (convert image to c-style array): https://javl.github.io/image2cpp/
// Photopea (online graphics editor like Photoshop): https://www.photopea.com/
// Piskel Application (online animation editor): https://www.piskelapp.com/p/create/sprite

// Related videos with Arduino UNO and 128x64 OLED screen:
// Arduino OLED menu: https://youtu.be/HVHVkKt-ldc
// U8g vs U8g2: https://youtu.be/K5e0lFRvZ2E
// Arduino Parking Sensor - https://youtu.be/sEWw087KOj0
// Turbo pressure gauge with Arduino and OLED display - https://youtu.be/JXmw1xOlBdk
// Arduino Car Cluster with OLED Display - https://youtu.be/El5SJelwV_0
// Knob over OLED Display - https://youtu.be/SmbcNx7tbX8
// Arduino + OLED = 3D ? - https://youtu.be/kBAcaA7NAlA
// Arduino OLED Gauge - https://youtu.be/xI6dXTA02UQ
// Smaller & Faster Arduino - https://youtu.be/4GfPQoIRqW8
// Save Image from OLED Display to PC - https://youtu.be/Ft2pRMVm44E


//#include <Arduino.h>
//#include <U8g2lib.h>
//#include <Wire.h> // library required for IIC communication
//
//U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE); // initialization for the used OLED display
//
//// the arrays below are generated from the image2cpp tool, scroll down for the actual code
//
//// '_a_frm0,40', 50x50px
//const unsigned char epd_bitmap__a_frm0_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 
//	0xe0, 0x83, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 
//	0x38, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x70, 0x00, 
//	0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0x00, 
//	0x00, 0x06, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0xc0, 
//	0x0f, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x1c, 0x00, 
//	0x00, 0x00, 0x1c, 0x00, 0x70, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x30, 0x00, 0x20, 0x00, 
//	0x38, 0x00, 0x38, 0x70, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x01, 0x38, 0x00, 0xe0, 0x83, 
//	0x0f, 0xc0, 0x07, 0x1f, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm1,40', 50x50px
//const unsigned char epd_bitmap__a_frm1_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 
//	0xe0, 0x83, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 
//	0x38, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x70, 0x00, 
//	0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x0c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x0c, 0x00, 0x00, 
//	0x00, 0x06, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0xc0, 
//	0x0f, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x1c, 0x00, 
//	0x00, 0x00, 0x1c, 0x00, 0x70, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 
//	0x38, 0x00, 0x38, 0x70, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x01, 0x00, 0x00, 0xe0, 0x83, 
//	0x0f, 0xc0, 0x07, 0x03, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x03, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm2,50', 50x50px
//const unsigned char epd_bitmap__a_frm2_50 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 
//	0xe0, 0x83, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0x60, 0x00, 0x00, 0x00, 0x38, 0x00, 
//	0x38, 0x70, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x70, 0x18, 
//	0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x1c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x0c, 0x00, 0x00, 
//	0x00, 0x06, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0xc0, 
//	0x0f, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x1c, 0x00, 
//	0x00, 0x00, 0x1c, 0x00, 0x70, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 
//	0x38, 0x00, 0x38, 0x70, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x01, 0x00, 0x00, 0xe0, 0x83, 
//	0x0f, 0xc0, 0x07, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x1f, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm4,40', 50x50px
//const unsigned char epd_bitmap__a_frm4_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x00, 0x00, 
//	0xe0, 0x83, 0x0f, 0xc0, 0x07, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x01, 0x00, 0x00, 0x38, 0x00, 
//	0x38, 0x70, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x70, 0x18, 
//	0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x1c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x0c, 0x00, 0x00, 
//	0x00, 0x06, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0xc0, 
//	0x0f, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x1c, 0x00, 
//	0x00, 0x00, 0x1c, 0x00, 0x70, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x10, 0x00, 0x00, 0x00, 
//	0x38, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x83, 
//	0x0f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm3,40', 50x50px
//const unsigned char epd_bitmap__a_frm3_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x04, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x07, 0x00, 0x00, 
//	0xe0, 0x83, 0x0f, 0xc0, 0x07, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x00, 0x00, 0x00, 0x38, 0x00, 
//	0x38, 0x70, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x70, 0x18, 
//	0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x1c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x0c, 0x00, 0x00, 
//	0x00, 0x06, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0xc0, 
//	0x0f, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x1c, 0x00, 
//	0x00, 0x00, 0x1c, 0x00, 0x70, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 
//	0x38, 0x00, 0x38, 0x70, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0x83, 
//	0x0f, 0xc0, 0x01, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm5,40', 50x50px
//const unsigned char epd_bitmap__a_frm5_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 
//	0xe0, 0x83, 0x0f, 0xc0, 0x07, 0x1f, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x01, 0x18, 0x00, 0x38, 0x00, 
//	0x38, 0x70, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x70, 0x18, 
//	0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x1c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x0c, 0x00, 0x00, 
//	0x00, 0x06, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0xc0, 
//	0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x00, 0x00, 
//	0x00, 0x00, 0x1c, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 
//	0x38, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x83, 
//	0x0f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm6,40', 50x50px
//const unsigned char epd_bitmap__a_frm6_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 
//	0xe0, 0x83, 0x0f, 0xc0, 0x07, 0x1f, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x01, 0x3c, 0x00, 0x38, 0x00, 
//	0x38, 0x70, 0x00, 0x70, 0x00, 0x18, 0x00, 0x30, 0x30, 0x00, 0x60, 0x00, 0x1c, 0x00, 0x70, 0x18, 
//	0x00, 0xc0, 0x00, 0x0c, 0x00, 0xe0, 0x1c, 0x00, 0xc0, 0x00, 0x0e, 0x00, 0xc0, 0x0c, 0x00, 0x00, 
//	0x00, 0x06, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0xc0, 
//	0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x00, 0x00, 
//	0x00, 0x00, 0x1c, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 
//	0x38, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x83, 
//	0x0f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm7,40', 50x50px
//const unsigned char epd_bitmap__a_frm7_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 
//	0xe0, 0x83, 0x0f, 0xc0, 0x07, 0x1f, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x01, 0x38, 0x00, 0x38, 0x00, 
//	0x18, 0x70, 0x00, 0x70, 0x00, 0x18, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 0x1c, 0x00, 0x00, 0x18, 
//	0x00, 0xc0, 0x00, 0x0c, 0x00, 0x00, 0x1c, 0x00, 0xc0, 0x00, 0x0e, 0x00, 0x00, 0x0c, 0x00, 0xc0, 
//	0x01, 0x06, 0x00, 0x00, 0x0e, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0xc0, 
//	0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x00, 0x00, 
//	0x00, 0x00, 0x1c, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 
//	0x38, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x83, 
//	0x0f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm8,50', 50x50px
//const unsigned char epd_bitmap__a_frm8_50 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x80, 0xff, 0x01, 0x00, 0xff, 0x07, 0x00, 
//	0xe0, 0x83, 0x00, 0xc0, 0x07, 0x1f, 0x00, 0xf0, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0x38, 0x00, 
//	0x00, 0x70, 0x00, 0x70, 0x00, 0x18, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 0x1c, 0x00, 0x00, 0x18, 
//	0x00, 0xc0, 0x00, 0x0c, 0x00, 0x00, 0x1c, 0x00, 0xc0, 0x00, 0x0e, 0x00, 0x00, 0x0c, 0x00, 0xc0, 
//	0x01, 0x06, 0x00, 0x00, 0x0e, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0xc0, 
//	0x01, 0x00, 0x80, 0x01, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x01, 0x0c, 0x00, 0xe0, 0x00, 0x00, 
//	0xc0, 0x00, 0x1c, 0x00, 0x70, 0x00, 0x00, 0xc0, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x40, 0x00, 
//	0x38, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x83, 
//	0x0f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm9,40', 50x50px
//const unsigned char epd_bitmap__a_frm9_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x80, 0x0f, 0x00, 0x00, 0xff, 0x07, 0x00, 
//	0xe0, 0x03, 0x00, 0xc0, 0x07, 0x1f, 0x00, 0x70, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0x38, 0x00, 
//	0x00, 0x70, 0x00, 0x70, 0x00, 0x18, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 0x1c, 0x00, 0x00, 0x18, 
//	0x00, 0xc0, 0x00, 0x0c, 0x00, 0x00, 0x1c, 0x00, 0xc0, 0x00, 0x0e, 0x00, 0x00, 0x0c, 0x00, 0xc0, 
//	0x01, 0x06, 0x00, 0x00, 0x0e, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0xc0, 
//	0x01, 0x00, 0x80, 0x01, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x01, 0x0c, 0x00, 0xe0, 0x00, 0x00, 
//	0xc0, 0x00, 0x1c, 0x00, 0x70, 0x00, 0x00, 0xc0, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 
//	0x38, 0x00, 0x38, 0x00, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x38, 0x00, 0xe0, 0x83, 
//	0x0f, 0x00, 0x00, 0x1c, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm10,40', 50x50px
//const unsigned char epd_bitmap__a_frm10_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 
//	0x60, 0x00, 0x00, 0xc0, 0x07, 0x1f, 0x00, 0x70, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0x38, 0x00, 
//	0x00, 0x70, 0x00, 0x70, 0x00, 0x18, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 0x1c, 0x00, 0x00, 0x18, 
//	0x00, 0xc0, 0x00, 0x0c, 0x00, 0x00, 0x1c, 0x00, 0xc0, 0x00, 0x0e, 0x00, 0x00, 0x0c, 0x00, 0xc0, 
//	0x01, 0x06, 0x00, 0x00, 0x0e, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0xc0, 
//	0x01, 0x00, 0x80, 0x01, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x01, 0x0c, 0x00, 0xe0, 0x00, 0x00, 
//	0xc0, 0x00, 0x1c, 0x00, 0x70, 0x00, 0x00, 0xc0, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 
//	0x38, 0x00, 0x38, 0x00, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x38, 0x00, 0xe0, 0x83, 
//	0x0f, 0x00, 0x00, 0x1f, 0x00, 0x80, 0xff, 0x03, 0x00, 0xc0, 0x07, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm11,40', 50x50px
//const unsigned char epd_bitmap__a_frm11_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 
//	0x00, 0x00, 0x00, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 0x0c, 0x00, 0x00, 0x18, 
//	0x00, 0xc0, 0x00, 0x0c, 0x00, 0x00, 0x1c, 0x00, 0xc0, 0x00, 0x0e, 0x00, 0x00, 0x0c, 0x00, 0xc0, 
//	0x01, 0x06, 0x00, 0x00, 0x0e, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0xc0, 
//	0x01, 0x00, 0x80, 0x01, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x01, 0x0c, 0x00, 0xe0, 0x00, 0x00, 
//	0xc0, 0x00, 0x1c, 0x00, 0x70, 0x00, 0x00, 0xc0, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 
//	0x38, 0x00, 0x38, 0x00, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x38, 0x00, 0xe0, 0x83, 
//	0x0f, 0x00, 0x06, 0x1f, 0x00, 0x80, 0xff, 0x03, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm12,40', 50x50px
//const unsigned char epd_bitmap__a_frm12_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 
//	0x00, 0x00, 0x00, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x18, 
//	0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xc0, 
//	0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0xc0, 
//	0x01, 0x00, 0x80, 0x01, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x01, 0x0c, 0x00, 0xe0, 0x00, 0x00, 
//	0xc0, 0x00, 0x1c, 0x00, 0x70, 0x00, 0x00, 0xc0, 0x00, 0x18, 0x00, 0x30, 0x20, 0x00, 0x60, 0x00, 
//	0x38, 0x00, 0x38, 0x70, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x01, 0x38, 0x00, 0xe0, 0x83, 
//	0x0f, 0xc0, 0x07, 0x1f, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm13,40', 50x50px
//const unsigned char epd_bitmap__a_frm13_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 
//	0x00, 0x00, 0x00, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x18, 
//	0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xc0, 
//	0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x00, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 
//	0x0d, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0xc0, 0x01, 0x08, 0x00, 0xe0, 0x1c, 0x00, 
//	0xc0, 0x00, 0x1c, 0x00, 0x70, 0x18, 0x00, 0xc0, 0x00, 0x18, 0x00, 0x30, 0x30, 0x00, 0x60, 0x00, 
//	0x38, 0x00, 0x38, 0x70, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x01, 0x38, 0x00, 0xe0, 0x83, 
//	0x0f, 0xc0, 0x07, 0x1f, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm14,50', 50x50px
//const unsigned char epd_bitmap__a_frm14_50 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 
//	0x00, 0x00, 0x00, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x18, 
//	0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xc0, 
//	0x01, 0x00, 0x00, 0x80, 0x0f, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x07, 0x00, 0x80, 0x01, 0x00, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x07, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 
//	0x0f, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0xc0, 0x01, 0x00, 0x00, 0xe0, 0x1c, 0x00, 
//	0xc0, 0x00, 0x00, 0x00, 0x70, 0x18, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x60, 0x00, 
//	0x00, 0x00, 0x38, 0x70, 0x00, 0x70, 0x00, 0xc0, 0x00, 0x1e, 0xe0, 0x01, 0x38, 0x00, 0xe0, 0x83, 
//	0x0f, 0xc0, 0x07, 0x1f, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm15,40', 50x50px
//const unsigned char epd_bitmap__a_frm15_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 
//	0x00, 0x00, 0x00, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0x18, 
//	0x00, 0xc0, 0x00, 0x00, 0x00, 0xe0, 0x1c, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0xc0, 
//	0x01, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x07, 0x00, 0x80, 0x01, 0x00, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x07, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 
//	0x0f, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0xc0, 0x01, 0x00, 0x00, 0xe0, 0x1c, 0x00, 
//	0xc0, 0x00, 0x00, 0x00, 0x70, 0x18, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x60, 0x00, 
//	0x00, 0x00, 0x38, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x1e, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x80, 
//	0x0f, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0xfc, 0x03, 0x00, 0xff, 0x07, 0x00, 0x00, 0xfc, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm16,40', 50x50px
//const unsigned char epd_bitmap__a_frm16_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0xff, 0x07, 0x00, 
//	0x00, 0x00, 0x0e, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x1e, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x38, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0x18, 
//	0x00, 0xc0, 0x00, 0x00, 0x00, 0xe0, 0x1c, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0xc0, 
//	0x01, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x07, 0x00, 0x80, 0x01, 0x00, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x07, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 
//	0x0f, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0xc0, 0x01, 0x00, 0x00, 0xe0, 0x1c, 0x00, 
//	0xc0, 0x00, 0x00, 0x00, 0x60, 0x18, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x60, 0x00, 
//	0x00, 0x00, 0x38, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x1e, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x80, 
//	0x0f, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x80, 0x03, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm17,40', 50x50px
//const unsigned char epd_bitmap__a_frm17_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0xf0, 0x03, 0x00, 0xff, 0x07, 0x00, 
//	0x00, 0x80, 0x0f, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x1e, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x38, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0x18, 
//	0x00, 0xc0, 0x00, 0x00, 0x00, 0xe0, 0x1c, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0xc0, 
//	0x01, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x07, 0x00, 0x80, 0x01, 0x00, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x07, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 
//	0x0f, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0xc0, 0x01, 0x00, 0x00, 0xe0, 0x1c, 0x00, 
//	0xc0, 0x00, 0x00, 0x00, 0x70, 0x18, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x60, 0x00, 
//	0x00, 0x00, 0x38, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x10, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x00, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm18,40', 50x50px
//const unsigned char epd_bitmap__a_frm18_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 
//	0x00, 0x83, 0x0f, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x1e, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x38, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0x18, 
//	0x00, 0xc0, 0x00, 0x00, 0x00, 0xe0, 0x1c, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0xc0, 
//	0x01, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x07, 0x00, 0x80, 0x01, 0x00, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x07, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 
//	0x0f, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x80, 0x1c, 0x00, 
//	0xc0, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 
//	0x00, 0x00, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x00, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm19,40', 50x50px
//const unsigned char epd_bitmap__a_frm19_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 
//	0xe0, 0x83, 0x0f, 0xc0, 0x07, 0x1f, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x01, 0x38, 0x00, 0x38, 0x00, 
//	0x38, 0x70, 0x00, 0x70, 0x00, 0x10, 0x00, 0x30, 0x30, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0x18, 
//	0x00, 0xc0, 0x00, 0x00, 0x00, 0xe0, 0x1c, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0xc0, 
//	0x01, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x07, 0x00, 0x80, 0x01, 0x00, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 
//	0x0e, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x1c, 0x00, 
//	0xc0, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 
//	0x00, 0x00, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x00, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm20,50', 50x50px
//const unsigned char epd_bitmap__a_frm20_50 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 
//	0xe0, 0x83, 0x0f, 0xc0, 0x07, 0x1f, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x01, 0x38, 0x00, 0x38, 0x00, 
//	0x38, 0x70, 0x00, 0x70, 0x00, 0x18, 0x00, 0x30, 0x30, 0x00, 0x60, 0x00, 0x1c, 0x00, 0x70, 0x18, 
//	0x00, 0xc0, 0x00, 0x0c, 0x00, 0xe0, 0x00, 0x00, 0xc0, 0x00, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0xc0, 
//	0x01, 0x06, 0x00, 0xc0, 0x01, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x00, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 
//	0x0e, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x1c, 0x00, 
//	0xc0, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 
//	0x00, 0x00, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x00, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm21,40', 50x50px
//const unsigned char epd_bitmap__a_frm21_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 
//	0xe0, 0x83, 0x0f, 0x80, 0x07, 0x1f, 0x00, 0xf0, 0x00, 0x1e, 0x80, 0x01, 0x38, 0x00, 0x38, 0x00, 
//	0x38, 0x00, 0x00, 0x70, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x1c, 0x00, 0x70, 0x00, 
//	0x00, 0xc0, 0x00, 0x0c, 0x00, 0xe0, 0x00, 0x00, 0xc0, 0x00, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0xc0, 
//	0x01, 0x06, 0x00, 0xc0, 0x01, 0x00, 0x80, 0x01, 0x06, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 
//	0x0e, 0x00, 0x80, 0x01, 0x0e, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x1c, 0x00, 
//	0xc0, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 
//	0x00, 0x00, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x00, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm22,40', 50x50px
//const unsigned char epd_bitmap__a_frm22_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x80, 0xff, 0x03, 0x00, 0xf0, 0x07, 0x00, 
//	0xe0, 0x83, 0x0f, 0x00, 0x00, 0x1f, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x38, 0x00, 0x38, 0x00, 
//	0x38, 0x00, 0x00, 0x70, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x1c, 0x00, 0x70, 0x00, 
//	0x00, 0xc0, 0x00, 0x0c, 0x00, 0xe0, 0x00, 0x00, 0xc0, 0x00, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0xc0, 
//	0x01, 0x06, 0x00, 0xc0, 0x01, 0x00, 0x80, 0x01, 0x06, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 
//	0x0e, 0x00, 0x80, 0x01, 0x0e, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x01, 0x0c, 0x00, 0x00, 0x1c, 0x00, 
//	0xc0, 0x00, 0x1c, 0x00, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x18, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 
//	0x38, 0x00, 0x00, 0x70, 0x00, 0x70, 0x00, 0x10, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0x00, 0x00, 
//	0x00, 0xc0, 0x07, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm23,40', 50x50px
//const unsigned char epd_bitmap__a_frm23_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x06, 0x00, 
//	0xe0, 0x83, 0x0f, 0x00, 0x00, 0x1e, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x3c, 0x00, 0x38, 0x00, 
//	0x38, 0x00, 0x00, 0x70, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x1c, 0x00, 0x70, 0x00, 
//	0x00, 0xe0, 0x00, 0x0c, 0x00, 0xe0, 0x00, 0x00, 0xc0, 0x00, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0xc0, 
//	0x01, 0x06, 0x00, 0xc0, 0x01, 0x00, 0x80, 0x01, 0x06, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 
//	0x0e, 0x00, 0x80, 0x01, 0x0e, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x01, 0x0c, 0x00, 0x00, 0x1c, 0x00, 
//	0xc0, 0x00, 0x1c, 0x00, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x18, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 
//	0x38, 0x00, 0x00, 0x70, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0xe0, 0x03, 
//	0x00, 0xc0, 0x07, 0x1f, 0x00, 0x80, 0x03, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm24,40', 50x50px
//const unsigned char epd_bitmap__a_frm24_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 
//	0xe0, 0x83, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 
//	0x38, 0x00, 0x00, 0x70, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00, 0x1c, 0x00, 0x70, 0x00, 
//	0x00, 0xc0, 0x00, 0x0c, 0x00, 0xe0, 0x00, 0x00, 0xc0, 0x00, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0xc0, 
//	0x01, 0x06, 0x00, 0xc0, 0x01, 0x00, 0x80, 0x01, 0x06, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 
//	0x0e, 0x00, 0x80, 0x01, 0x0e, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x01, 0x0c, 0x00, 0x00, 0x1c, 0x00, 
//	0xc0, 0x00, 0x1c, 0x00, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x18, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 
//	0x38, 0x00, 0x00, 0x70, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x00, 0xe0, 0x01, 0x38, 0x00, 0xe0, 0x03, 
//	0x00, 0xc0, 0x07, 0x1f, 0x00, 0x80, 0x7f, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x7e, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm25,40', 50x50px
//const unsigned char epd_bitmap__a_frm25_40 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 
//	0xe0, 0x83, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 
//	0x38, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x70, 0x00, 
//	0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0x80, 
//	0x01, 0x06, 0x00, 0xc0, 0x01, 0x00, 0x80, 0x01, 0x06, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 0x07, 0x00, 0x80, 0x01, 0x06, 0x00, 0x00, 
//	0x0e, 0x00, 0x80, 0x01, 0x0e, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x01, 0x0c, 0x00, 0x00, 0x1c, 0x00, 
//	0xc0, 0x00, 0x1c, 0x00, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x18, 0x00, 0x00, 0x30, 0x00, 0x60, 0x00, 
//	0x38, 0x00, 0x00, 0x70, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x06, 0xe0, 0x01, 0x38, 0x00, 0xe0, 0x83, 
//	0x0f, 0xc0, 0x07, 0x1f, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm26,50', 50x50px
//const unsigned char epd_bitmap__a_frm26_50 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 
//	0xe0, 0x83, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 
//	0x38, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x70, 0x00, 
//	0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0x00, 
//	0x00, 0x06, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 
//	0x0e, 0x00, 0x80, 0x01, 0x0e, 0x00, 0x00, 0x0c, 0x00, 0xc0, 0x01, 0x0c, 0x00, 0x20, 0x1c, 0x00, 
//	0xc0, 0x00, 0x1c, 0x00, 0x70, 0x18, 0x00, 0xc0, 0x00, 0x18, 0x00, 0x30, 0x30, 0x00, 0x60, 0x00, 
//	0x38, 0x00, 0x38, 0x70, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x01, 0x3c, 0x00, 0xe0, 0x83, 
//	0x0f, 0xc0, 0x07, 0x1f, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//// '_a_frm27,50', 50x50px
//const unsigned char epd_bitmap__a_frm27_50 [] PROGMEM = {
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 
//	0xe0, 0x83, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 
//	0x38, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x70, 0x00, 
//	0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x00, 0x00, 0x00, 
//	0x00, 0x06, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x06, 
//	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0xc0, 
//	0x0f, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xe0, 0x1c, 0x00, 
//	0x00, 0x00, 0x1c, 0x00, 0x70, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x30, 0x00, 0x20, 0x00, 
//	0x38, 0x00, 0x38, 0x70, 0x00, 0x70, 0x00, 0xf0, 0x00, 0x1e, 0xe0, 0x01, 0x38, 0x00, 0xe0, 0x83, 
//	0x0f, 0xc0, 0x07, 0x1f, 0x00, 0x80, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x00, 0x00, 
//	0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//};
//
//// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 10304)
//const int epd_bitmap_allArray_LEN = 28;
//const unsigned char* epd_bitmap_allArray[28] = {
//	epd_bitmap__a_frm0_40,
//	epd_bitmap__a_frm1_40,	
//	epd_bitmap__a_frm2_50,
//	epd_bitmap__a_frm3_40,
//	epd_bitmap__a_frm4_40,
//	epd_bitmap__a_frm5_40,
//	epd_bitmap__a_frm6_40,
//	epd_bitmap__a_frm7_40,
//	epd_bitmap__a_frm8_50,
//	epd_bitmap__a_frm9_40,	
//	epd_bitmap__a_frm10_40,
//	epd_bitmap__a_frm11_40,
//	epd_bitmap__a_frm12_40,
//	epd_bitmap__a_frm13_40,
//	epd_bitmap__a_frm14_50,
//	epd_bitmap__a_frm15_40,
//	epd_bitmap__a_frm16_40,
//	epd_bitmap__a_frm17_40,
//	epd_bitmap__a_frm18_40,
//	epd_bitmap__a_frm19_40,
//	epd_bitmap__a_frm20_50,
//	epd_bitmap__a_frm21_40,
//	epd_bitmap__a_frm22_40,
//	epd_bitmap__a_frm23_40,
//	epd_bitmap__a_frm24_40,
//	epd_bitmap__a_frm25_40,
//	epd_bitmap__a_frm26_50,
//	epd_bitmap__a_frm27_50
//};
//
//int counter = 0; // counter for the currently displayed frame of the animation
//
//void setup(void) {
//  u8g2.begin(); // start the u8g2 library
//}
//
//void loop(void) {
//
//  u8g2.clearBuffer();					// clear the internal memory
//  u8g2.drawXBMP(39, 7, 50, 50, epd_bitmap_allArray[counter]); // draw frame of the animation
//  u8g2.sendBuffer();					// transfer internal memory to the display
//
//	counter = (counter + 1) % 28; // increase the counter, but always go between 0-27
//}
//
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>

// OLED display size
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SH1106G display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Button pins
const int UP_BUTTON = 6;
const int DOWN_BUTTON = 7;
const int SELECT_BUTTON = 8;
const int BACK_BUTTON = 9;

// Sensor pins
const int TEMP_SENSOR = A0;  // Example: LM35 connected to A0
const int FIRE_SENSOR = A1;  // Example: Flame sensor connected to A1
const int DUST_SENSOR = A2;  // Example: Dust sensor connected to A2
const int GAS_SENSOR = A3;   // Example: MQ series gas sensor connected to A3

// Menu variables
const char* menuItems[] = {"Temperature", "Fire Sensor", "Dust Sensor", "Gas Sensor", "Humidity", "Pressure"};
const int totalMenuItems = sizeof(menuItems) / sizeof(menuItems[0]);
int menuIndex = 0;       // Current selection
int menuOffset = 0;      // Starting item in the visible list
const int visibleMenuItems = 4; // Number of items visible at a time
bool inSubMenu = false;

// Function declarations
void showMenu();
void updateMenuOffset();
void showSubMenu(int index);
float readTemperature();

void setup() {
  // Initialize the display
  if (!display.begin(0x3C)) { // Adjust I2C address if necessary
    for (;;); // Stop if OLED is not found
  }
  display.clearDisplay();
  display.display();

  // Initialize buttons
  pinMode(UP_BUTTON, INPUT_PULLUP);
  pinMode(DOWN_BUTTON, INPUT_PULLUP);
  pinMode(SELECT_BUTTON, INPUT_PULLUP);
  pinMode(BACK_BUTTON, INPUT_PULLUP);

  // Display the main menu
  showMenu();
}

void loop() {
  // Navigation and menu logic
  if (!inSubMenu) {
    // Main menu navigation
    if (digitalRead(UP_BUTTON) == LOW) {
      menuIndex = (menuIndex > 0) ? menuIndex - 1 : totalMenuItems - 1; // Wrap-around
      updateMenuOffset();
      showMenu();
      delay(200);
    }
    if (digitalRead(DOWN_BUTTON) == LOW) {
      menuIndex = (menuIndex < totalMenuItems - 1) ? menuIndex + 1 : 0; // Wrap-around
      updateMenuOffset();
      showMenu();
      delay(200);
    }
    if (digitalRead(SELECT_BUTTON) == LOW) {
      inSubMenu = true;
      showSubMenu(menuIndex);
      delay(200);
    }
  } else {
    // Submenu logic
    if (digitalRead(BACK_BUTTON) == LOW) {
      inSubMenu = false;
      showMenu();
      delay(200);
    }
  }
}

void updateMenuOffset() {
  // Adjust the menu offset for scrolling
  if (menuIndex < menuOffset) {
    menuOffset = menuIndex;
  } else if (menuIndex >= menuOffset + visibleMenuItems) {
    menuOffset = menuIndex - visibleMenuItems + 1;
  }
}

void showMenu() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);
  display.setCursor(0, 0);
  display.println("Main Menu:");

  // Display visible menu items
  int16_t x1, y1, textWidth, textHeight; // Use int16_t for getTextBounds
  int maxTextWidth = 0;
  for (int i = 0; i < visibleMenuItems; i++) {
    int itemIndex = menuOffset + i;
    if (itemIndex >= totalMenuItems) break; // Prevent overflow

    // Get the width of the current menu item
    display.getTextBounds(menuItems[itemIndex], 0, 0, &x1, &y1, &textWidth, &textHeight); // Get text width and height
    
    if (textWidth > maxTextWidth) maxTextWidth = textWidth;

    if (itemIndex == menuIndex) {
      display.print("> "); // Highlight the current selection
    } else {
      display.print("  ");
    }
    display.println(menuItems[itemIndex]);
  }

  // Draw the scroll bar on the right side with reduced width
  int scrollBarWidth = 3;  // Reduced width of the scroll bar
  int scrollBarHeight = (maxTextWidth * SCREEN_HEIGHT) / totalMenuItems;  // Size of the scroll bar based on text width
  int scrollBarPosition = (menuIndex * SCREEN_HEIGHT) / totalMenuItems;  // Scroll bar position

  // Draw the border of the scroll bar with the reduced width
  display.drawRect(SCREEN_WIDTH - scrollBarWidth, 0, scrollBarWidth, SCREEN_HEIGHT, SH110X_WHITE);  // Scroll bar border
  // Fill the scroll bar with the reduced width
  display.fillRect(SCREEN_WIDTH - scrollBarWidth, scrollBarPosition, scrollBarWidth, scrollBarHeight, SH110X_WHITE);  // Scroll bar fill

  display.display();
}

void showSubMenu(int index) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);
  display.setCursor(0, 0);

  switch (index) {
    case 0:
      display.println("Temperature:");
      display.print("Value: ");
      display.print(readTemperature());
      display.println(" C");
      break;
    case 1:
      display.println("Fire Sensor:");
      display.print("Value: ");
      display.println(analogRead(FIRE_SENSOR));
      break;
    case 2:
      display.println("Dust Sensor:");
      display.print("Value: ");
      display.println(analogRead(DUST_SENSOR));
      break;
    case 3:
      display.println("Gas Sensor:");
      display.print("Value: ");
      display.println(analogRead(GAS_SENSOR));
      break;
    case 4:
      display.println("Humidity:");
      display.print("Value: ");
      display.println("50%"); // Replace with actual humidity reading
      break;
    case 5:
      display.println("Pressure:");
      display.print("Value: ");
      display.println("1013 hPa"); // Replace with actual pressure reading
      break;
  }

  display.println("Press BACK to exit");
  display.display();
}

float readTemperature() {
  // Example: LM35 sensor. Adjust calculation based on your sensor.
  int raw = analogRead(TEMP_SENSOR);
  return raw * (5.0 / 1023.0) * 100.0;
}
